generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model UserProfile {
  id                    Int              @id @default(autoincrement())
  email                 String           @unique
  name                  String           @unique
  realName              String?
  picture               String?
  bggName               String?
  games                 GameCollection[] @relation()
  sentRelationships     Relationship[]   @relation("sender")
  receivedRelationships Relationship[]   @relation("recipient")
}

model Game {
  id          Int              @id
  name        String
  thumbnail   String?
  image       String?
  year        Int
  playingTime Int
  minPlayers  Int
  maxPlayers  Int
  weight      Float            @default(3)
  BGGRating   Float            @default(5)
  updatedAt   DateTime?        @updatedAt
  users       GameCollection[]
}

model GameCollection {
  user   UserProfile @relation(fields: [userId], references: [id])
  userId Int
  game   Game        @relation(fields: [gameId], references: [id])
  gameId Int

  own        Boolean
  wantToPlay Boolean
  wishlist   Boolean

  @@id([userId, gameId])
}

enum RelationshipType {
  FRIEND_REQUEST
  FRIENDSHIP
}

model Relationship {
  sender      UserProfile @relation(fields: [senderId], references: [id], name: "sender", onDelete: Cascade)
  senderId    Int
  recipient   UserProfile @relation(fields: [recipientId], references: [id], name: "recipient", onDelete: Cascade)
  recipientId Int

  type RelationshipType

  updatedAt DateTime @updatedAt
  cratedAt  DateTime @default(now())

  @@id([senderId, recipientId])
}
