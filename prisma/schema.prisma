generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String           @id @default(cuid())
  name                  String?
  email                 String?          @unique
  emailVerified         DateTime?
  accounts              Account[]
  sessions              Session[]
  profileComplete       Boolean          @default(false)
  role                  Role             @default(USER)
  realName              String?
  about                 String?
  place                 String?
  preference            String?
  favorites             Game[]
  image                 String?
  bggName               String?
  games                 GameCollection[] @relation()
  sentRelationships     Relationship[]   @relation("sender")
  receivedRelationships Relationship[]   @relation("recipient")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Game {
  id          Int              @id
  name        String
  thumbnail   String?
  image       String?
  year        Int
  playingTime Int
  minPlayers  Int
  maxPlayers  Int
  weight      Float            @default(3)
  BGGRating   Float?
  BGGRank     Int?
  updatedAt   DateTime?        @updatedAt
  users       GameCollection[]
  favoritedBy User[]
}

model GameCollection {
  user   User   @relation(fields: [userId], references: [id])
  userId String
  game   Game   @relation(fields: [gameId], references: [id])
  gameId Int

  own        Boolean
  wantToPlay Boolean
  wishlist   Boolean

  @@id([userId, gameId])
}

enum RelationshipType {
  FRIEND_REQUEST
  FRIENDSHIP
}

model Relationship {
  sender      User   @relation(fields: [senderId], references: [id], name: "sender", onDelete: Cascade)
  senderId    String
  recipient   User   @relation(fields: [recipientId], references: [id], name: "recipient", onDelete: Cascade)
  recipientId String

  type RelationshipType

  updatedAt DateTime @updatedAt
  cratedAt  DateTime @default(now())

  @@id([senderId, recipientId])
}

enum Role {
  USER
  PREMIUM
  FRIENDS_FAMILY
  ADMIN
}

model FeatureFlag {
  id    Int    @id @default(autoincrement())
  name  String
  roles Role[]
}
